from odoo import http, api
from odoo.http import request

from datetime import date
from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT


class ImagingStudy(http.Controller):
    @http.route('/create_imaging_study1', type='json', auth='user')
    def create_imaging_study(self, **rec):
        if request.jsonrequest:

            valsB={

                 "sopClass":[]
            }

            valsA = {
                "endpoint":[],
                "bodySite":[],
                "laterality":[],
                "instance":[],
                # "instance":[(0,0,valsB)]
            }


            values_for_imaging_study = {
                "status":rec["status"],
                "series": [(0, 0, valsA)]
            }



#start_of_code_for_endpoint

            z = []
            for inp_endpoint in rec["series"][0]["endpoint"]:
                z.append(inp_endpoint)
                print("inp_endpoint-->", inp_endpoint)
                # print(values_for_imaging_study["series"])
                values_for_imaging_study["series"][0][2]["endpoint"].append((0, 0, inp_endpoint))

#end_of_code_for_endpoint

#start_of_code_for_bodysite

            system = rec["series"][0]["bodySite"]["system"]
            code = rec["series"][0]["bodySite"]["code"]
            display = rec["series"][0]["bodySite"]["display"]
            bodySite = dict(zip(["system", "code", "display"], [system, code, display]))
            values_for_imaging_study["series"][0][2]["bodySite"].append((0,0, bodySite))

# end_of_code_for_bodysite

# start_of_code_for_laterality

            system = rec["series"][0]["laterality"]["system"]
            code = rec["series"][0]["laterality"]["code"]
            display = rec["series"][0]["laterality"]["display"]
            laterality = dict(zip(["system", "code", "display"], [system, code, display]))
            values_for_imaging_study["series"][0][2]["laterality"].append((0, 0, laterality))

# end_of_code_for_laterality


            last_id_for_imaging_study_series=request.env['imaging.study.series'].sudo().search([])[-1].id + 1

            print("last_id_for_imaging_study_series-->",last_id_for_imaging_study_series)


            for inp_series_instance in rec["series"][0]["instance"]:
                    a = inp_series_instance["uid"]
                    b = inp_series_instance["number"]
                    c = inp_series_instance["title"]
                    d=inp_series_instance["sopClass"]["system"]
                    e=inp_series_instance["sopClass"]["code"]
                    p = dict(zip(["uid", "number", "title","system","code"], [a, b, c,d,e]))
                    values_for_imaging_study["series"][0][2]["instance"].append((0,0,p))


            def create_imaging_study():

                for inp_series in rec["series"]:
                    a = inp_series["uid"]
                    b = inp_series["description"]
                    c = inp_series["number"]
                    d = inp_series["numberOfInstances"]
                    x = dict(zip(["uid", "description", "number", "numberOfInstances"], [a, b, c, d]))

                    values_for_imaging_study["series"].append((1,last_id_for_imaging_study_series,x))

            create_imaging_study()

        new_imaging_study = request.env['imaging.study'].sudo().create(values_for_imaging_study)

        args = {'success': True, 'message': 'Success', 'id': new_imaging_study.id}

        return args



# time_date_format_for '%Y-%m-%d %H:%M:%S'

# first create child record first(for endpoint and then link parent record to it)

